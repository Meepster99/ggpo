
:: run following in wsl
:: cmake -G "Visual Studio 17 2022" -A Win32 -B build -DBUILD_SHARED_LIBS=off
:: & "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -G "Visual Studio 17 2022" -A Win32 -B build -DBUILD_SHARED_LIBS=off
nope, not in wsl

annd now i have to link this with mingw

ugh or 
& "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -G "MinGW Makefiles" -B build -DBUILD_SHARED_LIBS=off

ok on linux 
grab https://gist.github.com/peterspackman/8cf73f7f12ba270aa8192d6911972fe8
cmake -DCMAKE_TOOLCHAIN_FILE=./mingw-w64-x86_64.cmake -B build -DBUILD_SHARED_LIBS=off


nono, need 32 bit

USE FOLLOWING:

# Sample toolchain file for building for Windows from an Ubuntu Linux system.
#
# Typical usage:
#    *) install cross compiler: `sudo apt-get install mingw-w64`
#    *) cd build
#    *) cmake -DCMAKE_TOOLCHAIN_FILE=~/mingw-w64-x86_64.cmake ..
# This is free and unencumbered software released into the public domain.

set(CMAKE_SYSTEM_NAME Windows)
set(TOOLCHAIN_PREFIX i686-w64-mingw32)

# cross compilers to use for C, C++ and Fortran
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)
set(CMAKE_Fortran_COMPILER ${TOOLCHAIN_PREFIX}-gfortran)
set(CMAKE_RC_COMPILER ${TOOLCHAIN_PREFIX}-windres)

# target environment on the build host system
set(CMAKE_FIND_ROOT_PATH /usr/${TOOLCHAIN_PREFIX})

# modify default behavior of FIND_XXX() commands
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)


END FOLLOWING

edit flags.make to be CXX_FLAGS = -std=c++2a -O3 -m32 -static (REMOVE CXX_FLAGS = -std=gnu++98 /W4 /WX)

in ggpo/build/gmakelists,, add -lws2_32 to CMAKE_CXX_STANDARD_LIBRARIES
i think

nono
flags:
CXX_FLAGS = -std=c++2a -O3 -m32 -static

ggpo/build/cmakelists:
CMAKE_CXX_STANDARD_LIBRARIES:STRING=-static -lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 -lws2_32

actually use cmake -DCMAKE_TOOLCHAIN_FILE=./mingw-w64-x86_64.cmake -B build -DBUILD_SHARED_LIBS=on

